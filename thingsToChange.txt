Websocket:
Saving message
Getting users status through getStatus message type
Subbing to friend's status on behalf of user

gRPC:
API Gateway & User Service
Done	Register: send user details, save
	Login: send user details, get back userdetails, access and refresh token
	Auth: Get user details from User service, or create token, // to authenticate (Don't, share public key from User Service, to enable API 
		Gateway to authenticate JWTs)
	Search contact: send user's email, send back details of user that exists
	Add contact: send both user's details, create contact relationship
	
API Gateway & Message Service:
	GetMsgs: Send both user ids, and offset value, send back messages
	
RabbitMQ:
API Gateway & User Service:
Hmmm, this turned out to not need User Service, User service would definitely be needed if I chose to not 
directly meddle with the User's status.
	User Status: Gateway will update user's status in Redis & produce to Exchange "User Status" (tbd)
	Other gateways, whose websocket connection Goroutines have a dedicated Contact Status Goroutine running,
	will consume the publish and send the update down the connection to the client.
	
Or:	Send gRPC request to User Service to update user's status in cache. And then User Service will publish 
	latest status.
	
API Gateway & Message Service:
	Saving a new message: Gateway will publish on RabbitMQ, Message Service which is listening will pick it up
	and save it, check if the "to" field user is online, if yes, then publish on a Queue which will be picked up
	by API Gateway to deliver the message through a websocket.
	If not online then publish on a queue on which User Service is listening, user service will pick it up and send
	an SNS (User Service has to pick it up since it has the details of a user)
